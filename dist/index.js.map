{"version":3,"sources":["index.js"],"names":["winston","defaultOpts","name","level","colorize","prettyPrint","object","JSON","stringify","handleExceptions","json","winster","process","env","NODE_ENV","Logger","transports","File","filename","Console","message","args","silly","debug","verbose","info","warn","err","error","log","arguments","prototype","apply"],"mappings":";;;;;;;;AAAA;;IAAYA,O;;;;;;AAEZ,IAAIC,cAAc;AAChBC,QAAM,eADU;AAEhBC,SAAO,OAFS;AAGhBC,YAAU,IAHM;AAIhBC,eAAa,qBAAUC,MAAV,EAAmB;AAC9B,WAAOC,KAAKC,SAAL,CAAgBF,MAAhB,EAAwB,IAAxB,EAA8B,CAA9B,CAAP;AACD,GANe;AAOhBG,oBAAkB,IAPF;AAQhBC,QAAM;AARU,CAAlB;;IAWqBC,O;AACnB,qBAAc;AAAA;;AACZ,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;AACnC,WAAKd,OAAL,GAAe,IAAKA,QAAQe,MAAb,CAAqB;AAClCC,oBAAY,CACV,IAAKhB,QAAQgB,UAAR,CAAmBC,IAAxB,CAA8B,EAAEC,UAAU,SAAZ,EAA9B,CADU;AADsB,OAArB,CAAf;AAKD,KAND,MAMO;AACL,WAAKlB,OAAL,GAAe,IAAIA,QAAQe,MAAZ,CAAoB;AACjCC,oBAAY,CACV,IAAIhB,QAAQgB,UAAR,CAAmBG,OAAvB,CAAgClB,WAAhC,CADU;AADqB,OAApB,CAAf;AAKD;AAEF;;;;0BACMmB,O,EAAmB;AAAA;;AAAA,wCAAPC,IAAO;AAAPA,YAAO;AAAA;;AACxB,uBAAKrB,OAAL,EAAasB,KAAb,kBAAoBF,OAApB,SAAgCC,IAAhC;AACD;;;0BAEMD,O,EAAmB;AAAA;;AAAA,yCAAPC,IAAO;AAAPA,YAAO;AAAA;;AACxB,wBAAKrB,OAAL,EAAauB,KAAb,mBAAoBH,OAApB,SAAgCC,IAAhC;AACD;;;4BAEQD,O,EAAmB;AAAA;;AAAA,yCAAPC,IAAO;AAAPA,YAAO;AAAA;;AAC1B,wBAAKrB,OAAL,EAAawB,OAAb,mBAAsBJ,OAAtB,SAAkCC,IAAlC;AACD;;;yBAEKD,O,EAAmB;AAAA;;AAAA,yCAAPC,IAAO;AAAPA,YAAO;AAAA;;AACvB,wBAAKrB,OAAL,EAAayB,IAAb,mBAAmBL,OAAnB,SAA+BC,IAA/B;AACD;;;yBAEKD,O,EAAmB;AAAA;;AAAA,yCAAPC,IAAO;AAAPA,YAAO;AAAA;;AACvB,wBAAKrB,OAAL,EAAa0B,IAAb,mBAAmBN,OAAnB,SAA+BC,IAA/B;AACD;;AAED;;;;0BACOM,G,EAAM;AACX,WAAK3B,OAAL,CAAa4B,KAAb,CAAoBD,GAApB;AACD;;;;;;AAGH;AACA;;;kBA5CqBhB,O;AA6CrBA,QAAQkB,GAAR,GAAc,YAAW;AACvB,MAAIR,OAAOS,SAAX;AACAT,OAAM,CAAN,IAAYA,KAAM,CAAN,IAAY,MAAxB;AACArB,UAAQe,MAAR,CAAegB,SAAf,CAAyBF,GAAzB,CAA6BG,KAA7B,CAAoC,IAApC,EAA0CX,IAA1C;AACD,CAJD","file":"index.js","sourcesContent":["import * as winston from 'winston';\n\nlet defaultOpts = {\n  name: 'debug-console',\n  level: 'silly',\n  colorize: true,\n  prettyPrint: function( object ) {\n    return JSON.stringify( object, null, 2 );\n  },\n  handleExceptions: true,\n  json: false\n};\n\nexport default class winster {\n  constructor() {\n    if (process.env.NODE_ENV === 'test') {\n      this.winston = new (winston.Logger)({\n        transports: [\n          new (winston.transports.File)({ filename: 'foo.log' })\n        ]\n      });\n    } else {\n      this.winston = new winston.Logger( {\n        transports: [\n          new winston.transports.Console( defaultOpts )\n        ]\n      } );\n    }\n\n  }\n  silly( message, ...args ) {\n    this.winston.silly( message, ...args );\n  }\n\n  debug( message, ...args ) {\n    this.winston.debug( message, ...args );\n  }\n\n  verbose( message, ...args ) {\n    this.winston.verbose( message, ...args );\n  }\n\n  info( message, ...args ) {\n    this.winston.info( message, ...args );\n  }\n\n  warn( message, ...args ) {\n    this.winston.warn( message, ...args );\n  }\n\n  // Highest level\n  error( err ) {\n    this.winston.error( err );\n  }\n}\n\n// Fix to include a line break into the log\n// See: https://github.com/winstonjs/winston/issues/460\nwinster.log = function() {\n  let args = arguments;\n  args[ 1 ] = args[ 1 ] + '\\r\\n';\n  winston.Logger.prototype.log.apply( this, args );\n};\n\n\n\n\n"],"sourceRoot":"/Users/swr/git/stefanwalther/winster/src"}